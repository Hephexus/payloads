/*
 * uninitialized_memory_exploit.s - Uninitialized Memory Exploit
 *
 * Fully functional version: This module allocates a memory region via mmap with MAP_ANONYMOUS;
 * then it, without explicitly initializing the memory, writes the contents to stdout.
 * (On many systems, anonymous mappings are zeroed, but in a vulnerable allocator they might leak old data.)
 *
 * Syscalls used: mmap (222), write (64), munmap (215), exit (93).
 */
 
.section .text
.global main
main:
    /* Allocate 128 bytes RW (non-executable needed for reading only) */
    mov x0, 0
    mov x1, #128
    mov x2, #3        /* PROT_READ | PROT_WRITE */
    mov x3, #0x22
    mov x4, #-1
    mov x5, 0
    mov x8, #222
    svc 0
    mov x20, x0      /* Pointer to allocated memory */
    /* Immediately write the contents of the allocated region to stdout */
    mov x0, #1
    mov x1, x20
    mov x2, #128
    mov x8, #64
    svc 0
    /* Unmap the memory */
    mov x0, x20
    mov x1, #128
    mov x8, #215
    svc 0
    mov x0, #0
    mov x8, #93
    svc 0
