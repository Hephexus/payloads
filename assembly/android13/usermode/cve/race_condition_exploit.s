/*
 * race_condition_exploit.s - Race Condition Exploit POC.
 *
 * This exploit uses clone() to create a child process that, in tandem with the parent,
 * increment a shared variable, demonstrating a race condition.
 *
 * WARNING: This is timing-dependent.
 */
 
.section .data
shared_var:
    .word 0

message:
    .asciz "Race Condition Exploit Executed!\n"

.section .bss
    .lcomm child_stack, 256

.section .text
.global main
main:
    adr x1, child_stack
    add x1, x1, #256   // Set child stack pointer
    mov x0, #17        // SIGCHLD flag
    mov x8, #220       // clone syscall
    svc 0
    cmp x0, #0
    beq child_proc
    /* Parent: increment shared_var */
parent_loop:
    ldr w2, [shared_var]
    add w2, w2, #1
    str w2, [shared_var]
    cmp w2, #1000
    blt parent_loop
    b finish
child_proc:
    /* Child: increment shared_var more rapidly */
child_loop:
    ldr w2, [shared_var]
    add w2, w2, #2
    str w2, [shared_var]
    cmp w2, #1000
    blt child_loop
finish:
    mov x0, #1
    adr x1, message
    mov x2, #29
    mov x8, #64
    svc 0
    mov x0, #0
    mov x8, #93
    svc 0
